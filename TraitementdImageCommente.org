#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+LATEX_HEADER: \usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
#+TITLE: Traitement d'image avec commentaires
#+SUBTITLE: (compléments d'informations à destination du professeur)
#+AUTHOR: Raoul HATTERER



Source : [[http://www.ac-grenoble.fr/disciplines/informatiquelycee/n_site/snt_photo_transImg.html][Traitement d'image de l'académie de grenoble]]

* Installation de PIL

À faire au préalable par le professeur.

#+begin_src shell
 pip3 install pillow
#+end_src



* Codage RVB et niveau de gris

- Aller sur [[https://www.w3schools.com/colors/colors_rgb.asp][colors RGB]] et tester ce que l'on obtient si l'on remplace chacune des valeurs R, V et B d'un pixel par la moyenne des sous-pixels.
- Essayer pour plusieurs couleurs.


* Image de départ

#+CAPTION: Image de départ
#+ATTR_LATEX: :width 6cm
[[file:pomme.jpg]]


* Comment lire un pixel

Après avoir fait quelques recherches sur ce qu'est un "pixel", voyons comment lire le pixel de coordonnées (100,250).

#+begin_src python :results output :exports both :tangle lecturePixel.py
from PIL import Image
img = Image.open("pomme.jpg")
r,v,b=img.getpixel((100,250))
print("canal rouge : ",r,"canal vert : ",v,"canal bleu : ",b)
#+end_src

#+RESULTS:
: canal rouge :  19 canal vert :  88 canal bleu :  192


* Comment écrire un pixel

#+begin_src python  :tangle ecriturePixel.py
from PIL import Image
img = Image.open("pomme.jpg")
img.putpixel((5,5),(255,0,0))
img.show()
#+end_src

#+RESULTS:
: None


* Que fait le programme suivant ?

#+begin_src python :results output :exports output  :tangle  mystereCommente.py 
from PIL import Image                        # Importation de la librairie PILLOW (gestion image)
img = Image.open("pomme.jpg")                # Mise en mémoire dans la variable "img" du fichier 
#--------------------------------------------# pomme.jpg qui doit être dans le même répertoire que
#--------------------------------------------# le programme
largeur_image,hauteur_image=img.size         # Python autorise les affectations multiples.
#--------------------------------------------# img.size est un attribut (une variable intrinsèque
#--------------------------------------------# à la variable img) avec les dimensions de l'image
#--------------------------------------------# sous forme de tupple (= liste non modifiable). 

for y in range(hauteur_image):               # Boucle pour parcourir les toutes les lignes
    for x in range(largeur_image):           # Boucle imbriquée pour parcourir les pixels de la
#--------------------------------------------# ligne en cours
        rouge,vert,bleu=img.getpixel((x,y))  # Méthode getpixels() appliquée à la variable img qui
#--------------------------------------------# renvoie les valeurs R,V,B du pixel à la position x,y
        nouveau_rouge=vert                   # Le vert prend l'intensité du rouge
        nouveau_vert=bleu                    # Le bleu prend l'intensité du vert
        nouveau_bleu=rouge                   # Le rouge prend l'intensité du bleu
        img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu)) # Méthode putpixel()
#--------------------------------------------# qui remplace les valeurs R, V, B du pixel en x,y 

img.show()                                   # Affichage de l'image
img.save("pommeMystere.jpg")                 # Sauvegarde de l'image obtenue
print(img.size)                              # Affichage du tupple avec la taille de l'image 
#+end_src

#+RESULTS:
: (480, 300)


On analyse le code ci-dessus qui servira de base pour le défi suivant.

#+CAPTION: Résultat du programme mystère
#+ATTR_LATEX: :width 6cm
[[file:pommeMystere.jpg]]


* Passage d'une image en niveau de gris

Après avoir fait quelques recherches sur les "images en niveaux de gris", écrivez un programme qui transforme une "image couleur" en une "image en niveaux de gris".

Petite astuce qui pourrait vous aider : en Python pour avoir une division entière (le résultat est un entier), il faut utiliser l'opérateur // à la place de l'opérateur / 

Remarque: On donne l'algorithme aux élèves (ou on le construit avec eux) ; ils doivent alors programmer le passage d'une image couleur à une image en niveaux de gris.


#+begin_src python  :tangle pommegrise.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image,hauteur_image=img.size

for y in range(hauteur_image):
    for x in range(largeur_image):
       rouge,vert,bleu=img.getpixel((x,y))
       nouveau_rouge=(vert+bleu+rouge)//3
       nouveau_vert=(vert+bleu+rouge)//3
       nouveau_bleu=(vert+bleu+rouge)//3
       img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu))

img.show()
img.save("pommegrise.jpg")
#+end_src

#+RESULTS:
: None

#+CAPTION: Image en niveaux de gris
#+ATTR_LATEX: :width 6cm
[[file:pommegrise.jpg]]


* Passage d'une image en vrai niveau de gris (sans informations triplées) 


** Utilisation du mode =L= (luminance) pour les images en nuances de gris 

#+begin_src python  :tangle pommegriseL.py
from PIL import Image
img = Image.open("pomme.jpg").convert("L")
img.show()
img.save("pommegriseL.jpg")
#+end_src

#+RESULTS:
: None

Comparer la taille des différents fichiers. Conclure.

#+CAPTION: Image en niveaux de gris (sans redondance)
#+ATTR_LATEX: :width 6cm
[[file:pommegriseL.jpg]]

/Réponse : code sur un octet par pixel l'image prend moins de place donc le fichier est moins lourd./

** Existe-t-il d'autres modes ?

Les [[https://pillow.readthedocs.io/en/latest/handbook/concepts.html#modes][modes]] supportés par =Pillow= sont : 

- =1= (1-bit pixels, black and white, stored with one pixel per byte)
- =L= (8-bit pixels, black and white)
- =P= (8-bit pixels, mapped to any other mode using a color palette)
- =RGB= (3x8-bit pixels, true color)
- =RGBA= (4x8-bit pixels, true color with transparency mask)
- =CMYK= (4x8-bit pixels, color separation)
- =YCbCr= (3x8-bit pixels, color video format)
- =LAB= (3x8-bit pixels, the L*a*b color space)
- =HSV= (3x8-bit pixels, Hue, Saturation, Value color space)
- =I= (32-bit signed integer pixels)
- =F= (32-bit floating point pixels)



* Pour aller plus loin

** Créer une image en négatif 

#+begin_src python  :tangle pommeNegatif.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image,hauteur_image=img.size

for y in range(hauteur_image):
    for x in range(largeur_image):
        rouge,vert,bleu=img.getpixel((x,y))
        nouveau_rouge=255-rouge
        nouveau_vert=255-vert
        nouveau_bleu=255-bleu
        img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu))

img.show()
img.save("pommeNegatif.jpg")
#+end_src

#+RESULTS:
: None

#+CAPTION: Négatif
#+ATTR_LATEX: :width 6cm
[[file:pommeNegatif.jpg]]

** Diagonale

Créer le programme qui garde l'image d'origine au-dessus d'une diagonale et qui transforme en niveaux de gris en-dessous de celle-ci.

#+begin_src python  :tangle pommemisgrise.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image,hauteur_image=img.size

for y in range(hauteur_image):
    tailleDiag=y*largeur_image//hauteur_image
    for x in range(tailleDiag):
       rouge,vert,bleu=img.getpixel((x,y))
       nouveau_rouge=(vert+bleu+rouge)//3
       nouveau_vert=(vert+bleu+rouge)//3
       nouveau_bleu=(vert+bleu+rouge)//3
       img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu))

img.show()
img.save("pommemisgrise.jpg")
#+end_src

#+RESULTS:
: None

#+CAPTION: Pomme coupée
#+ATTR_LATEX: :width 6cm
[[file:pommemisgrise.jpg]]

