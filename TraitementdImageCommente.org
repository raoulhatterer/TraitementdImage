#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+TITLE: Traitement d'image avec commentaires
#+SUBTITLE: (compléments d'informations à destination du professeur)
#+AUTHOR: Raoul HATTERER



Source : [[http://www.ac-grenoble.fr/disciplines/informatiquelycee/n_site/snt_photo_transImg.html][Traitement d'image de l'académie de grenoble]]

* Installation de PIL

À faire au préalable par le professeur.

#+begin_src shell
 pip3 install pillow
#+end_src

* La logique RVB

Activité de découverte du RVB: [[https://www.w3schools.com/colors/colors_rgb.asp][colorsRGB]]

Pour un pixel, calculer la moyenne des niveaux puis mettre les 3 valeurs à cette moyenne. Essayer pour plusieurs couleurs.

* Image de départ

#+CAPTION: Image de départ (480px \times 300px)
[[file:pomme.jpg]]


* Comment lire un pixel

Après avoir fait quelques recherches sur ce qu'est un "pixel", voyons comment lire le pixel de coordonnées (100,250).

#+begin_src python :results output :exports both :tangle lecturePixel.py
from PIL import Image
img = Image.open("pomme.jpg")
r,v,b=img.getpixel((100,250))
print("canal rouge : ",r,"canal vert : ",v,"canal bleu : ",b)
#+end_src

#+RESULTS:
: canal rouge :  19 canal vert :  88 canal bleu :  192


* Comment écrire un pixel

#+begin_src python  :tangle ecriturePixel.py
from PIL import Image
img = Image.open("pomme.jpg")
img.putpixel((5,5),(255,0,0))
img.show()
#+end_src

#+RESULTS:
: None


* Que fait le programme suivant ?

#+begin_src python  :tangle  mystere.py
from PIL import Image # Importation de la librairie PILLOW (gestion image)
img = Image.open("pomme.jpg") # Mise en mémoire dans la variable "img" le fichier pomme.jpg qui doit être dans le même répertoire que le programme
largeur_image,hauteur_image=img.size # Méthode size aplliquée à la variable img qui renvoie la largeur et la hauteur de l'image
for y in range(hauteur_image): # Pour chaque ligne de 0 à hauteur de l'image
    for x in range(largeur_image): #Pour chaque colonne de 0 à la largeur de chaque ligne
        rouge,vert,bleu=img.getpixel((x,y)) #Méthode getpixels appliquée à la variable img à la position x,y qui renvoie les valeurs r,g,b du pixel.
        nouveau_rouge=vert #le vert devient rouge
        nouveau_vert=bleu #le bleu devient vert
        nouveau_bleu=rouge #le rouge devient bleu
        img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu)) #Méthode putpixels appliquée à la variable img à la position x,y qui remplace les valeurs r,g,b du pixel.
img.show() #affichage de l'image
img.save("pommeMystere.jpg") #sauvegarde de l'image obtenue
#+end_src

#+RESULTS:
: None


On analyse le code ci-dessus qui servira de base pour le défi suivant.

#+CAPTION: Résultat du programme mystère
[[file:pommeMystere.jpg]]


* Passage d'une image en niveau de gris

Après avoir fait quelques recherches sur les "images en niveau de gris", écrivez un programme qui transforme une "image couleur" en une "image en niveau de gris".

Petite astuce qui pourrait vous aider : en Python pour avoir une division entière (le résultat est un entier), il faut utiliser l'opérateur // à la place de l'opérateur / 

Remarque: On donne l'algorithme aux élèves (ou on le construit avec eux) ; ils doivent alors programmer le passage d'une image couleur à une image en niveaux de gris.


#+begin_src python  :tangle pommegrise.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image=480
hauteur_image=300
for y in range(hauteur_image):
    for x in range(largeur_image):
       rouge,vert,bleu=img.getpixel((x,y))
       nouveau_rouge=(vert+bleu+rouge)//3
       nouveau_vert=(vert+bleu+rouge)//3
       nouveau_bleu=(vert+bleu+rouge)//3
       img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu))
img.show()
img.save("pommegrise.jpg")
#+end_src

#+RESULTS:
: None

#+CAPTION: Image en niveaux de gris
[[file:pommegrise.jpg]]

* Pour aller plus loin

Créer une image en négatif 

#+begin_src python  :tangle pommegrise.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image,hauteur_image=img.size
for y in range(hauteur_image):
    for x in range(largeur_image):
        rouge,vert,bleu=img.getpixel((x,y))
        nouveau_rouge=255-rouge
        nouveau_vert=255-vert
        nouveau_bleu=255-bleu
        img.putpixel((x,y),(nouveau_rouge,nouveau_vert,nouveau_bleu))
img.show()
img.save("pommeNegatif.jpg")
#+end_src

Créer le programme qui garde l'image d'origine au-dessus de la diagonale et qui transforme en niveau de gris en-dessous

#+begin_src python  :tangle pommegrise.py
from PIL import Image
img = Image.open("pomme.jpg")
largeur_image,hauteur_image=img.size
for y in range(hauteur_image):
    tailleDiag=int((largeur_image/hauteur_image)*y)
    for x in range(tailleDiag):
        r,v,b=img.getpixel((x,y))
        n_r=(v+b+r)//3
        n_v=(v+b+r)//3
        n_b=(v+b+r)//3
        img.putpixel((x,y),(n_r,n_v,n_b))
img.show()
img.save("pommegrise.jpg")
#+end_src

